#!/bin/bash

# Script d'aide au d√©ploiement et d√©bogage
# Gestionnaire de mots de passe

set -e

echo "üîê Gestionnaire de mots de passe - Script d'aide au d√©ploiement"
echo "================================================================"

# Fonction d'aide
show_help() {
    echo "Usage: $0 [OPTION]"
    echo ""
    echo "Options:"
    echo "  start      - D√©marrer l'application (build + up)"
    echo "  stop       - Arr√™ter l'application"
    echo "  restart    - Red√©marrer l'application"
    echo "  logs       - Voir les logs"
    echo "  migrate    - Appliquer les migrations de base de donn√©es"
    echo "  clean      - Nettoyer les containers et volumes"
    echo "  debug      - Mode debug avec logs d√©taill√©s"
    echo "  health     - V√©rifier la sant√© des services"
    echo "  help       - Afficher cette aide"
    echo ""
}

# V√©rifier si Docker est install√©
check_docker() {
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n'est pas install√© ou non accessible"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose n'est pas install√© ou non accessible"
        exit 1
    fi
    
    echo "‚úÖ Docker et Docker Compose sont disponibles"
}

# D√©marrer l'application
start_app() {
    echo "üöÄ D√©marrage de l'application..."
    
    # Construire et d√©marrer
    docker-compose up --build -d
    
    echo ""
    echo "‚è≥ Attente du d√©marrage des services..."
    echo "   Premi√®re fois = 2-3 minutes (t√©l√©chargement + build)"
    echo "   D√©marrages suivants = 10-15 secondes"
    echo ""
    
    # Attendre suffisamment pour la premi√®re fois
    sleep 15
    
    # V√©rifier progressivement avec des messages clairs
    echo "ÔøΩ V√©rification progressive des services..."
    
    # Test simple - attendre que l'API r√©ponde
    local max_attempts=20
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s http://localhost:8080/health | grep -q "healthy"; then
            echo "‚úÖ Backend API pr√™t (tentative $attempt/$max_attempts)"
            break
        fi
        
        if [ $((attempt % 4)) -eq 0 ]; then
            echo "   Tentative $attempt/$max_attempts - Services en cours de d√©marrage..."
        fi
        
        sleep 3
        attempt=$((attempt + 1))
    done
    
    # V√©rification finale
    echo ""
    echo "üîç V√©rification finale de la sant√©..."
    check_health
    
    echo ""
    echo "‚úÖ Application d√©marr√©e!"
    echo "üì± Frontend: http://localhost:3000"
    echo "üîß Backend API: http://localhost:8080"
    echo ""
    
    # Conseils utiles
    echo "üí° Conseils:"
    echo "   ‚Ä¢ Premi√®re utilisation: Cr√©er un compte via 'S'inscrire'"
    echo "   ‚Ä¢ Si erreur: ./deploy.sh health puis ./deploy.sh logs"
    echo "   ‚Ä¢ Probl√®me de connexion: ./tools/rate_limit_helper.sh reset"
}

# Arr√™ter l'application
stop_app() {
    echo "üõë Arr√™t de l'application..."
    docker-compose down
    echo "‚úÖ Application arr√™t√©e"
}

# Red√©marrer l'application
restart_app() {
    echo "üîÑ Red√©marrage de l'application..."
    stop_app
    start_app
}

# Voir les logs
show_logs() {
    echo "üìã Logs des services..."
    docker-compose logs -f --tail=100
}

# Appliquer les migrations
migrate_db() {
    echo "üîß Application des migrations de base de donn√©es..."
    
    # Attendre que la base soit pr√™te
    echo "‚è≥ Attente de la disponibilit√© de la base de donn√©es..."
    sleep 5
    
    # Ex√©cuter le script de migration
    if [ -f "./scripts/migrate_db.sh" ]; then
        ./scripts/migrate_db.sh
    else
        echo "‚ùå Script de migration non trouv√©"
        return 1
    fi
    
    echo "‚úÖ Migrations appliqu√©es"
}

# Nettoyer
clean_all() {
    echo "üßπ Nettoyage des containers et volumes..."
    
    read -p "‚ö†Ô∏è Cela supprimera tous les donn√©es. Continuer? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker-compose down -v --remove-orphans
        docker system prune -f
        echo "‚úÖ Nettoyage termin√©"
    else
        echo "‚ùå Nettoyage annul√©"
    fi
}

# Mode debug
debug_mode() {
    echo "üêõ Mode debug - Logs d√©taill√©s..."
    
    # Arr√™ter et red√©marrer avec logs
    docker-compose down || true
    docker-compose up --build
}

# V√©rifier la sant√© des services
check_health() {
    echo "üè• V√©rification de la sant√© des services..."
    
    # V√©rifier la base de donn√©es
    echo "üóÑÔ∏è Base de donn√©es..."
    if docker-compose exec -T database pg_isready -U admin -d password_manager &> /dev/null; then
        echo "  ‚úÖ Base de donn√©es: OK"
    else
        echo "  ‚ùå Base de donn√©es: ERREUR"
    fi
    
    # V√©rifier le backend
    echo "üîß Backend..."
    if curl -s -f http://localhost:8080/health &> /dev/null; then
        echo "  ‚úÖ Backend: OK"
    else
        echo "  ‚ùå Backend: ERREUR"
    fi
    
    # V√©rifier le frontend
    echo "üì± Frontend..."
    if curl -s -f http://localhost:3000 &> /dev/null; then
        echo "  ‚úÖ Frontend: OK"
    else
        echo "  ‚ùå Frontend: ERREUR"
    fi
    
    # Informations sur les containers
    echo ""
    echo "üìä √âtat des containers:"
    docker-compose ps
}

# Fonction principale
main() {
    check_docker
    
    case "${1:-}" in
        "start")
            start_app
            ;;
        "stop")
            stop_app
            ;;
        "restart")
            restart_app
            ;;
        "logs")
            show_logs
            ;;
        "migrate")
            migrate_db
            ;;
        "clean")
            clean_all
            ;;
        "debug")
            debug_mode
            ;;
        "health")
            check_health
            ;;
        "help"|"-h"|"--help"|"")
            show_help
            ;;
        *)
            echo "‚ùå Option inconnue: $1"
            show_help
            exit 1
            ;;
    esac
}

# Ex√©cuter la fonction principale
main "$@"