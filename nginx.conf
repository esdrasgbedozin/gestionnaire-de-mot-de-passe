# Configuration Nginx pour la production avec headers de sécurité
# Génération des certificats SSL : certbot certonly --webroot -w /var/www/html -d votre-domaine.com

server {
    listen 80;
    server_name localhost;
    
    # Redirection forcée vers HTTPS en production
    # return 301 https://$server_name$request_uri;
    
    # Pour le développement, on autorise HTTP
    location / {
        proxy_pass http://backend:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Headers de sécurité (redondants avec Flask mais garantis)
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # CSP pour développement
        add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval'; script-src 'self' 'unsafe-inline' 'unsafe-eval' localhost:* 127.0.0.1:*; style-src 'self' 'unsafe-inline'; img-src 'self' data: https: localhost:* 127.0.0.1:*; connect-src 'self' localhost:* 127.0.0.1:*; frame-ancestors 'none';" always;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # Bloquer les fichiers sensibles
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ^/(config|env|docker-compose|\.env) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Cacher la version de Nginx
    server_tokens off;
}

# Configuration HTTPS pour la production (décommentez et configurez)
# server {
#     listen 443 ssl http2;
#     server_name votre-domaine.com;
#     
#     # Configuration SSL/TLS
#     ssl_certificate /etc/ssl/certs/certificate.pem;
#     ssl_certificate_key /etc/ssl/certs/private-key.pem;
#     
#     # Configuration SSL moderne et sécurisée
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     
#     # Headers de sécurité HTTPS
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
#     add_header X-Frame-Options "DENY" always;
#     add_header X-Content-Type-Options "nosniff" always;
#     add_header X-XSS-Protection "1; mode=block" always;
#     add_header Referrer-Policy "strict-origin-when-cross-origin" always;
#     
#     # CSP production (à ajuster selon vos besoins)
#     add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; frame-ancestors 'none'; upgrade-insecure-requests;" always;
#     
#     location / {
#         proxy_pass http://backend:5000;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         
#         proxy_connect_timeout 30s;
#         proxy_send_timeout 30s;
#         proxy_read_timeout 30s;
#     }
# }